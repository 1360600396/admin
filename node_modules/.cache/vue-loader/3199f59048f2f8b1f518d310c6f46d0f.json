{"remainingRequest":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\src\\views\\Car\\CarCard\\index.vue?vue&type=style&index=0&id=574637bc&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\src\\views\\Car\\CarCard\\index.vue","mtime":1704167262298},{"path":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1714140750111},{"path":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1714140755034},{"path":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1714140753336},{"path":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1714140750590},{"path":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1714140753088},{"path":"C:\\Users\\zxb\\Desktop\\黑马前端\\课件源码资料\\阶段五 Vue2+Vue3项目实战开发\\黑马智数项目-配套资料\\黑马智数项目-配套资料\\项目代码\\hmzs\\hmzs-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1714140753454}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jYXJkLWNvbnRhaW5lciB7CiAgcGFkZGluZzogMjBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwp9Cgouc2VhcmNoLWNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2IoMjM3LCAyMzcsIDIzNywgLjkpOwogIHBhZGRpbmctYm90dG9tOiAyMHB4OwogIC5zZWFyY2gtbWFpbiB7CiAgICB3aWR0aDogMjIwcHg7CiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgfQogIC5zZWFyY2gtYnRuewogICAgbWFyZ2luLWxlZnQ6MjBweDsKICB9Cn0KLmNyZWF0ZS1jb250YWluZXJ7CiAgbWFyZ2luOiAxMHB4IDBweDsKfQoucGFnZS1jb250YWluZXJ7CiAgcGFkZGluZzo0cHggMHB4OwogIHRleHQtYWxpZ246IHJpZ2h0Owp9Ci5mb3JtLWNvbnRhaW5lcnsKICBwYWRkaW5nOjBweCA4MHB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmNA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/Car/CarCard","sourcesContent":["<template>\n  <div class=\"card-container\">\n    <!-- 搜索区域 -->\n    <!--\n      思路分析: 把各种搜索条件当前请求参数发给后端 后端会根据字段对数据库数据做过滤筛选拿到符合条件的，返回\n       1. 表单数据的双向绑定收集到当前的请求参数\n       2. 把收集到的表单参数发送接口给后端拿符合条件的数据\n       3. 把拿到的数据重新显示到table列表中\n     -->\n    <div class=\"search-container\">\n      <span class=\"search-label\">车牌号码：</span>\n      <el-input v-model=\"params.carNumber\" clearable placeholder=\"请输入内容\" class=\"search-main\" />\n      <span class=\"search-label\">车主姓名：</span>\n      <el-input v-model=\"params.personName\" clearable placeholder=\"请输入内容\" class=\"search-main\" />\n      <span class=\"search-label\">状态：</span>\n      <!--\n        el-select: 双向绑定收集当前选中的数据\n        el-option: 下拉框中的每一项 label（中文显示） / value（选中之后赋值给v-model的数据将来\n        传给后端）\n       -->\n      <el-select v-model=\"params.cardStatus\">\n        <el-option v-for=\"item in statusList\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\" />\n      </el-select>\n      <el-button type=\"primary\" class=\"search-btn\" @click=\"doSearch\">查询</el-button>\n    </div>\n    <!-- 新增删除操作区域 -->\n    <div class=\"create-container\">\n      <el-button type=\"primary\" @click=\"$router.push('/addCard')\">添加月卡</el-button>\n      <el-button @click=\"delAllCard\">批量删除</el-button>\n    </div>\n    <!-- 表格区域 -->\n    <div class=\"table\">\n      <el-table style=\"width: 100%\" :data=\"list\" @selection-change=\"handleSelectionChange\">\n        <el-table-column\n          type=\"selection\"\n          width=\"55\"\n        />\n        <el-table-column type=\"index\" label=\"序号\" />\n        <el-table-column label=\"车主名称\" prop=\"personName\" />\n        <el-table-column label=\"联系方式\" prop=\"phoneNumber\" />\n        <el-table-column label=\"车牌号码\" prop=\"carNumber\" />\n        <el-table-column label=\"车辆品牌\" prop=\"carBrand\" />\n        <el-table-column label=\"剩余有效天数\" prop=\"totalEffectiveDate\" />\n        <el-table-column label=\"状态\" prop=\"cardStatus\" :formatter=\"formatStatus\" />\n        <el-table-column label=\"操作\" fixed=\"right\" width=\"180\">\n          <!--\n            scope 作用域插槽\n            scope.row -> 当前行的数据对象\n\n            如果我们只是想使用插槽渲染模版 #default\n            如果我们除了想要使用插槽渲染模版 而且还想要拿到它内部的数据 #default=\"scope\" scope类似于函数的形参\n            组件内部会把当前行数据对象当成一个实参传到scope的位置\n\n            在内部传递实参的时候 实参的格式长这个样式 所以row是固定的\n            {\n              row: 当前行的对象数据\n            }\n\n            因为本来传下来就是一个对象 所以通过解构赋值的方式去取row参数 #default=\"{ row }\"\n\n           -->\n          <template #default=\"scope\">\n            <el-button size=\"mini\" type=\"text\">续费</el-button>\n            <el-button size=\"mini\" type=\"text\">查看</el-button>\n            <el-button size=\"mini\" type=\"text\" @click=\"editCard(scope.row.id)\">编辑</el-button>\n            <el-button size=\"mini\" type=\"text\" @click=\"delCard(scope.row.id)\">删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n    <!-- 分页器 -->\n    <!--\n      1. 页数分出来 (页数 = 总条数 / 每页条数)\n      2. 点击每页的时候获取当前页的数据重新渲染到table上\n         1. 通过事件获取到当前点击的是第几页\n         2. 以当前拿到的页数作为参数去和后端要数据\n         3. 把获取到的当前页的列表数据重新渲染table组件上\n     -->\n    <div class=\"page-container\">\n      <el-pagination\n        layout=\"total, prev, pager, next\"\n        :page-size=\"params.pageSize\"\n        :total=\"total\"\n        @current-change=\"currentChange\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getCardListAPI, delCardAPI, delAllCardAPI } from '@/api/card'\nexport default {\n  name: 'Card',\n  data() {\n    return {\n      selectedList: [],\n      list: [], // 月卡列表\n      // 请求参数\n      params: {\n        page: 1,\n        pageSize: 2,\n        carNumber: '',\n        personName: '',\n        cardStatus: null\n      },\n      total: 0, // 总条数\n      statusList: [\n        {\n          id: null,\n          name: '全部'\n        },\n        {\n          id: 0,\n          name: '有效'\n        },\n        {\n          id: 1,\n          name: '已过期'\n        }\n      ]\n    }\n  },\n  mounted() {\n    this.getList()\n  },\n  methods: {\n    async getList() {\n      // 1. 调用接口\n      const res = await getCardListAPI(this.params)\n      // 2. 把后端数据赋值给响应式list\n      this.list = res.data.rows\n      this.total = res.data.total\n    },\n    // 格式化状态方法 跟着行走的 有几行就会执行几次 自动把当前行的数据当成实参传入 然后\n    // 把函数执行的返回值显示到当前行对应列的位置\n    formatStatus(row, column) {\n      console.log(row, column)\n      // return的数据就是要渲染到当前列的数据\n      // 如果当前的状态除了0/1/2/3/4/5/6 怎么办？- if\n      // 解决方案:通过映射的方式做匹配\n      const MAP = {\n        0: '有效',\n        1: '已过期'\n      }\n      // 对象取值 点语法  []语法\n      // return row.cardStatus === 0 ? '有效' : '已过期'\n      return MAP[row.cardStatus]\n    },\n    currentChange(page) {\n      console.log(page)\n      // 1. 把请求参数中的page修改为当前点击的页数\n      this.params.page = page\n      // 2. 发送请求重新获取列表\n      this.getList()\n    },\n    doSearch() {\n      // 1. 把当前的请求页数重置为1\n      this.params.page = 1\n      // 2. 执行getList\n      this.getList()\n    },\n    editCard(id) {\n      console.log(id)\n      // params - url/1001\n      // query - url？id = 1001\n      // 传参方式和取参方式要对应\n      this.$router.push({\n        path: '/addCard',\n        query: {\n          id\n        }\n      })\n    },\n    delCard(id) {\n      this.$confirm('确认删除月卡吗, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async() => {\n        await delCardAPI(id)\n        // 更新列表\n        this.getList()\n        this.$message({\n          type: 'success',\n          message: '删除成功!'\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n    },\n    handleSelectionChange(value) {\n      console.log(value)\n      this.selectedList = value\n      // 1. 添加新列 展示多选框\n      // 2. 绑定事件 拿到选中项的所有对象组成的数组\n      // 3. 调用接口需要做数据的处理 把对象数组中的每一项里的id拿到 拼接成逗号分割的写法\n      // 目标：把对象组成的数组 -> id组成的数组  map\n    },\n    async delAllCard() {\n      await delAllCardAPI(this.selectedList.map(item => item.id))\n      this.getList()\n      this.$message.success('批量删除成功')\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.card-container {\n  padding: 20px;\n  background-color: #fff;\n}\n\n.search-container {\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid rgb(237, 237, 237, .9);\n  padding-bottom: 20px;\n  .search-main {\n    width: 220px;\n    margin-right: 10px;\n  }\n  .search-btn{\n    margin-left:20px;\n  }\n}\n.create-container{\n  margin: 10px 0px;\n}\n.page-container{\n  padding:4px 0px;\n  text-align: right;\n}\n.form-container{\n  padding:0px 80px;\n}\n</style>\n"]}]}